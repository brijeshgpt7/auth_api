continue
ShortVisit.new
ShortVisit.new\
ShortVisit.new
@geolocation_data["ip"]
@geolocation_data[:ip]
@geolocation_data
continue
 JSON.parse(res, :symbolize => true)
res=RestClient.get "freegeoip.net/json/#{ra}"
ra="123.45.67.89"
 JSON.parse(res, :symbolize => true)
res=RestClient.get "freegeoip.net/json/123.45.67.89"
request.remote_ip="123.45.67.89"
request.remote_ip
res=RestClient.get "freegeoip.net/json/127.0.0.1"
res=RestClient.get freegeoip.net/json/"127.0.0.1"
res=RestClient.get freegeoip.net/json/"#{request.remote_ip}"
 JSON.parse(res, :symbolize => true)
 JSON.parse(res, :symbolize => true
res=RestClient.get "freegeoip.net/json/#{request.remote_ip}"
RestClient.get "freegeoip.net/json/#{request.remote_ip}"
"freegeoip.net/json/#{request.remote_ip}"
continue
@short_url
short_url
short_url.update(short_url_params)
authenticate_user
short_url_params
continue
authenticate_user
set_short_url
short_url
params
continue
api_current_user
short_url_params
continue
short_url_params
params
continue
params
continue
api_current_user.email
api_current_user
continue
params
continue
current_user
continue
@current_user ||= User.find_by_api_token(params[:api_token]) if params[:api_token].present?
 User.find_by_api_token(params[:api_token])
params
 User.find_by_id(params[:api_token])
current_user
params
authenticate_user
continue
params
authenticate_user
params
current_user
 User.find_by_id(params[:api_token])
 User.find_by_id(params[:api_token]
params
current_user
@current_user
continue
params
@current_user
current_user
continue
@current_user
current_user
continue
User.find_by_id(params[:api_token]) if params[:api_token].present?
params
continue
current_user
params
continue
request.headers[:user_id]
continue
request.headers[:user_id]
request.headers
request.headres
request
responce.hea
request.headers[:user_id]
continue
request.headers[:user_id]
continue
request.headers[:user_id]="1213"
request.headers[:user_id]
request.headers
responce.headers
request.headers
continue
session
continue
session
continue
session
session.present?
request.xhr?
params
session
continue
User.find_by_id(user_id)
user_id
continue
current_user
user
continue
authenticate_user
continue
headers["X-AUTH-TOKEN"]
user
continue
headers["X-AUTH-TOKEN"]
session[:user_id]
session[:user]
session
continue
params
continue
 current_user.short_urls.create!(short_url_params)
ShortUrl.first.destroy
ShortUrl.first
current_user.short_urls.new(short_url_params)
current_user.short_urls
current_user
continue
session[:d]
session
continue
current_user
continue
user = User.find_by_email(email)
password
email
continue
User.authenticate(params[:email], params[:password])
user
params
continue
  headers["X-AUTH-TOKEN"] =nil
user.api_token=nil 
user = User.find(params[:id])
SecureRandom.hex
user = User.find(params[:id])
params
continue
params[:password]
params[:email]
params
continue
params[:emai]
params[:email]
params[:session]
params[:seeion]
params
continue
params
continue
params
continue
Base64.encode64(password)
user.password
 user = User.find_by_email(email)
continue
user.password
Base64.encode64(user.password)
Base64.decode64(user.password)
user.password
 user = User.find_by_email(email)
user.password
 User.find_by_email(email)
password
email
continue
user
params
